{"ast":null,"code":"import { Subject, Subscription, BehaviorSubject, combineLatest, timer, EMPTY, of } from 'rxjs';\nimport { filter, debounce, switchMap, tap, delay, finalize, takeUntil, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction NgProgressComponent_ng_container_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"box-shadow\", \"0 0 10px \" + ctx_r2.color + \", 0 0 5px \" + ctx_r2.color);\n  }\n}\n\nfunction NgProgressComponent_ng_container_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelement(1, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-top-color\", ctx_r3.color)(\"border-left-color\", ctx_r3.color);\n  }\n}\n\nfunction NgProgressComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n    i0.ɵɵtemplate(4, NgProgressComponent_ng_container_0_div_4_Template, 1, 2, \"div\", 4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(5, NgProgressComponent_ng_container_0_div_5_Template, 2, 4, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const state_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"transition\", \"opacity \" + ctx_r0.speed + \"ms \" + ctx_r0.ease);\n    i0.ɵɵattribute(\"active\", state_r1.active);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"transform\", state_r1.transform)(\"background-color\", ctx_r0.color)(\"transition\", state_r1.active ? \"all \" + ctx_r0.speed + \"ms \" + ctx_r0.ease : \"none\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.meteor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.spinner);\n  }\n}\n\nclass NgProgressRef {\n  constructor(customConfig, _onDestroyCallback) {\n    this._onDestroyCallback = _onDestroyCallback; // Progress start source event (used to cancel finalizing delays)\n\n    this._started = new Subject(); // Progress start event: stream that emits only when it hasn't already started\n\n    this.started = this._started.pipe(filter(() => !this.isStarted)); // Progress ended source event\n\n    this._completed = new Subject(); // Progress start event: stream that emits only when it has already started\n\n    this.completed = this._completed.pipe(filter(() => this.isStarted)); // Stream that increments and updates the progress state\n\n    this._trickling = new Subject(); // Stream that combines \"_trickling\" and \"config\" streams\n\n    this._worker = Subscription.EMPTY;\n    this._state = new BehaviorSubject({\n      active: false,\n      value: 0\n    });\n    this._config = new BehaviorSubject(customConfig);\n    this.state = this._state.asObservable();\n    this.config = this._config.asObservable();\n    this._worker = combineLatest([this._trickling, this._config]).pipe(debounce(([start, config]) => timer(start ? config.debounceTime : 0)), switchMap(([start, config]) => start ? this.onTrickling(config) : this.onComplete(config))).subscribe();\n  } // Get current progress state\n\n\n  get snapshot() {\n    return this._state.value;\n  } // Check if progress has started\n\n\n  get isStarted() {\n    return this.snapshot.active;\n  }\n  /**\n   * Start the progress\n   */\n\n\n  start() {\n    this._started.next();\n\n    this._trickling.next(true);\n  }\n  /**\n   * Complete the progress\n   */\n\n\n  complete() {\n    this._trickling.next(false);\n  }\n  /**\n   * Increment the progress\n   */\n\n\n  inc(amount) {\n    const n = this.snapshot.value;\n\n    if (!this.isStarted) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = this._config.value.trickleFunc(n);\n      }\n\n      this.set(n + amount);\n    }\n  }\n  /**\n   * Set the progress\n   */\n\n\n  set(n) {\n    this.setState({\n      value: this.clamp(n),\n      active: true\n    });\n  }\n  /**\n   * Set config\n   */\n\n\n  setConfig(config) {\n    this._config.next(Object.assign(Object.assign({}, this._config.value), config));\n  }\n  /**\n   * Destroy progress reference\n   */\n\n\n  destroy() {\n    this._worker.unsubscribe();\n\n    this._trickling.complete();\n\n    this._state.complete();\n\n    this._config.complete();\n\n    this._started.complete();\n\n    this._completed.complete();\n\n    this._onDestroyCallback();\n  }\n  /**\n   * Set progress state\n   */\n\n\n  setState(state) {\n    this._state.next(Object.assign(Object.assign({}, this.snapshot), state));\n  }\n  /**\n   * Clamps a value to be between min and max\n   */\n\n\n  clamp(n) {\n    return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\n  }\n  /**\n   * Keeps incrementing the progress\n   */\n\n\n  onTrickling(config) {\n    if (!this.isStarted) {\n      this.set(this._config.value.min);\n    }\n\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\n  }\n  /**\n   * Completes then resets the progress\n   */\n\n\n  onComplete(config) {\n    this._completed.next();\n\n    return !this.isStarted ? EMPTY : of({}).pipe( // Complete the progress\n    tap(() => this.setState({\n      value: 100\n    })), // Deactivate the progress after a tiny delay\n    delay(config.speed * 1.7), tap(() => this.setState({\n      active: false\n    })), // Use a tiny delay before resetting\n    delay(config.speed), // Force the progress to reset even it got cancelled\n    finalize(() => this.setState({\n      value: 0\n    })), // Cancel any of the finalizing delays if the progress has started again\n    takeUntil(this._started));\n  }\n\n}\n\nconst NG_PROGRESS_CONFIG = new InjectionToken('ngProgressConfig');\nconst defaultConfig = {\n  min: 8,\n  max: 100,\n  speed: 200,\n  debounceTime: 0,\n  trickleSpeed: 300,\n  fixed: true,\n  meteor: true,\n  thick: false,\n  spinner: true,\n  ease: 'linear',\n  color: '#1B95E0',\n  direction: 'ltr+',\n  spinnerPosition: 'right',\n  trickleFunc: n => {\n    if (n >= 0 && n < 20) return 10;\n    if (n >= 20 && n < 50) return 4;\n    if (n >= 50 && n < 80) return 2;\n    if (n >= 80 && n < 99) return 0.5;\n    return 0;\n  }\n};\n\nclass NgProgress {\n  constructor(config) {\n    // Store progress bar instances\n    this._instances = new Map();\n    this.config = config ? Object.assign(Object.assign({}, defaultConfig), config) : defaultConfig;\n  }\n  /**\n   * Get or Create progress bar by ID\n   */\n\n\n  ref(id = 'root', config) {\n    if (this._instances.has(id)) {\n      // Get ProgressRef instance\n      const progressRef = this._instances.get(id);\n\n      if (config) {\n        progressRef.setConfig(Object.assign(Object.assign({}, this.config), config));\n      }\n\n      return progressRef;\n    } else {\n      // Create new ProgressRef instance\n      const progressRef = new NgProgressRef(Object.assign(Object.assign({}, this.config), config), this.deleteInstance(id));\n      return this._instances.set(id, progressRef).get(id);\n    }\n  }\n  /**\n   * Destroy all progress bar instances\n   */\n\n\n  destroyAll() {\n    this._instances.forEach(ref => ref.destroy());\n  }\n  /**\n   * A destroyer function for each progress bar instance\n   */\n\n\n  deleteInstance(id) {\n    return () => {\n      this._instances.delete(id);\n    };\n  }\n\n}\n\nNgProgress.ɵfac = function NgProgress_Factory(t) {\n  return new (t || NgProgress)(i0.ɵɵinject(NG_PROGRESS_CONFIG, 8));\n};\n\nNgProgress.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgProgress,\n  factory: NgProgress.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgress, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nclass NgProgressComponent {\n  constructor(_ngProgress) {\n    this._ngProgress = _ngProgress;\n    /** Creates a new instance if id is not already exists */\n\n    this.id = 'root';\n    /** Initializes inputs from the global config */\n\n    this.min = this._ngProgress.config.min;\n    this.max = this._ngProgress.config.max;\n    this.ease = this._ngProgress.config.ease;\n    this.color = this._ngProgress.config.color;\n    this.speed = this._ngProgress.config.speed;\n    this.thick = this._ngProgress.config.thick;\n    this.fixed = this._ngProgress.config.fixed;\n    this.meteor = this._ngProgress.config.meteor;\n    this.spinner = this._ngProgress.config.spinner;\n    this.trickleSpeed = this._ngProgress.config.trickleSpeed;\n    this.debounceTime = this._ngProgress.config.debounceTime;\n    this.trickleFunc = this._ngProgress.config.trickleFunc;\n    this.spinnerPosition = this._ngProgress.config.spinnerPosition;\n    this.direction = this._ngProgress.config.direction;\n    this.started = new EventEmitter();\n    this.completed = new EventEmitter();\n  }\n\n  get isStarted() {\n    var _a;\n\n    return (_a = this.progressRef) === null || _a === void 0 ? void 0 : _a.isStarted;\n  }\n\n  ngOnChanges() {\n    var _a; // Update progress bar config when inputs change\n\n\n    (_a = this.progressRef) === null || _a === void 0 ? void 0 : _a.setConfig({\n      max: this.max > 0 && this.max <= 100 ? this.max : 100,\n      min: this.min < 100 && this.min >= 0 ? this.min : 0,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      trickleFunc: this.trickleFunc,\n      debounceTime: this.debounceTime\n    });\n  }\n\n  ngOnInit() {\n    // Get progress bar service instance\n    this.progressRef = this._ngProgress.ref(this.id, {\n      max: this.max,\n      min: this.min,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      debounceTime: this.debounceTime\n    }); // Subscribe to progress state\n\n    this.state$ = this.progressRef.state.pipe(map(state => ({\n      active: state.active,\n      transform: `translate3d(${state.value}%,0,0)`\n    }))); // Subscribes to started and completed events on demand\n\n    if (this.started.observed) {\n      this._started = this.progressRef.started.subscribe(() => this.started.emit());\n    }\n\n    if (this.completed.observed) {\n      this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\n    }\n  }\n\n  ngOnDestroy() {\n    var _a, _b, _c;\n\n    (_a = this._started) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    (_b = this._completed) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n    (_c = this.progressRef) === null || _c === void 0 ? void 0 : _c.destroy();\n  }\n\n  start() {\n    this.progressRef.start();\n  }\n\n  complete() {\n    this.progressRef.complete();\n  }\n\n  inc(n) {\n    this.progressRef.inc(n);\n  }\n\n  set(n) {\n    this.progressRef.set(n);\n  }\n\n}\n\nNgProgressComponent.ɵfac = function NgProgressComponent_Factory(t) {\n  return new (t || NgProgressComponent)(i0.ɵɵdirectiveInject(NgProgress));\n};\n\nNgProgressComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgProgressComponent,\n  selectors: [[\"ng-progress\"]],\n  hostAttrs: [\"role\", \"progressbar\"],\n  hostVars: 4,\n  hostBindings: function NgProgressComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"spinnerPosition\", ctx.spinnerPosition)(\"direction\", ctx.direction)(\"thick\", ctx.thick)(\"fixed\", ctx.fixed);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    min: \"min\",\n    max: \"max\",\n    ease: \"ease\",\n    color: \"color\",\n    speed: \"speed\",\n    thick: \"thick\",\n    fixed: \"fixed\",\n    meteor: \"meteor\",\n    spinner: \"spinner\",\n    trickleSpeed: \"trickleSpeed\",\n    debounceTime: \"debounceTime\",\n    trickleFunc: \"trickleFunc\",\n    spinnerPosition: \"spinnerPosition\",\n    direction: \"direction\"\n  },\n  outputs: {\n    started: \"started\",\n    completed: \"completed\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [1, \"ng-progress-bar\"], [1, \"ng-bar-placeholder\"], [1, \"ng-bar\"], [\"class\", \"ng-meteor\", 3, \"boxShadow\", 4, \"ngIf\"], [\"class\", \"ng-spinner\", 4, \"ngIf\"], [1, \"ng-meteor\"], [1, \"ng-spinner\"], [1, \"ng-spinner-icon\"]],\n  template: function NgProgressComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgProgressComponent_ng_container_0_Template, 6, 11, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.state$));\n    }\n  },\n  directives: [i2.NgIf],\n  pipes: [i2.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{z-index:999999;pointer-events:none}[fixed=true][_nghost-%COMP%]   .ng-progress-bar[_ngcontent-%COMP%], [fixed=true][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{position:fixed}[fixed=true][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{top:15px}[fixed=true][spinnerPosition=left][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{left:15px}[fixed=true][spinnerPosition=right][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{right:15px}[thick=true][_nghost-%COMP%]   .ng-spinner-icon[_ngcontent-%COMP%]{width:24px;height:24px;border-width:3px}[thick=true][_nghost-%COMP%]   .ng-bar-placeholder[_ngcontent-%COMP%]{height:3px!important}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=ltr-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(3deg)}[direction=\\\"ltr+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=ltr-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(4deg)}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-bar[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-bar[_ngcontent-%COMP%]{margin-left:-100%}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{right:0}[direction=\\\"ltr+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{top:-3px}[direction=\\\"ltr+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{top:-4px}[direction=ltr-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{bottom:-3px}[direction=ltr-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{bottom:-4px}[direction=ltr-][_nghost-%COMP%]   .ng-bar-placeholder[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-bar-placeholder[_ngcontent-%COMP%]{transform:rotate(180deg)}[direction=ltr-][_nghost-%COMP%]   .ng-spinner-icon[_ngcontent-%COMP%], [direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-spinner-icon[_ngcontent-%COMP%]{animation-directionection:reverse}[direction=\\\"rtl+\\\"][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(-3deg)}[direction=\\\"rtl+\\\"][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%], [direction=rtl-][thick=true][_nghost-%COMP%]   .ng-meteor[_ngcontent-%COMP%]{transform:rotate(-4deg)}[spinnerPosition=left][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{left:10px}[spinnerPosition=right][_nghost-%COMP%]   .ng-spinner[_ngcontent-%COMP%]{right:10px}.ng-progress-bar[_ngcontent-%COMP%]{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true][_ngcontent-%COMP%]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder[_ngcontent-%COMP%]{position:absolute;height:2px;width:100%}.ng-bar[_ngcontent-%COMP%]{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor[_ngcontent-%COMP%]{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner[_ngcontent-%COMP%]{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon[_ngcontent-%COMP%]{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-progress',\n      host: {\n        'role': 'progressbar',\n        '[attr.spinnerPosition]': 'spinnerPosition',\n        '[attr.direction]': 'direction',\n        '[attr.thick]': 'thick',\n        '[attr.fixed]': 'fixed'\n      },\n      template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n           [attr.active]=\"state.active\"\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n               [style.transform]=\"state.transform\"\n               [style.backgroundColor]=\"color\"\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n               [style.borderTopColor]=\"color\"\n               [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\\\"ltr+\\\"] .ng-bar,:host[direction=\\\"rtl+\\\"] .ng-bar{margin-left:-100%}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{right:0}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\\\"rtl+\\\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\\\"rtl+\\\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\\\"rtl+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgProgress\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    ease: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    speed: [{\n      type: Input\n    }],\n    thick: [{\n      type: Input\n    }],\n    fixed: [{\n      type: Input\n    }],\n    meteor: [{\n      type: Input\n    }],\n    spinner: [{\n      type: Input\n    }],\n    trickleSpeed: [{\n      type: Input\n    }],\n    debounceTime: [{\n      type: Input\n    }],\n    trickleFunc: [{\n      type: Input\n    }],\n    spinnerPosition: [{\n      type: Input\n    }],\n    direction: [{\n      type: Input\n    }],\n    started: [{\n      type: Output\n    }],\n    completed: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NgProgressModule {\n  static withConfig(config) {\n    return {\n      ngModule: NgProgressModule,\n      providers: [{\n        provide: NG_PROGRESS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgProgressModule.ɵfac = function NgProgressModule_Factory(t) {\n  return new (t || NgProgressModule)();\n};\n\nNgProgressModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgProgressModule\n});\nNgProgressModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgProgressComponent],\n      exports: [NgProgressComponent],\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-progressbar\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NG_PROGRESS_CONFIG, NgProgress, NgProgressComponent, NgProgressModule, NgProgressRef };","map":{"version":3,"sources":["C:/Users/Luis Yañez/Desktop/sistema2/SPRING-BOOT-ANGULAR/lircay-app/node_modules/ngx-progressbar/fesm2015/ngx-progressbar.mjs"],"names":["Subject","Subscription","BehaviorSubject","combineLatest","timer","EMPTY","of","filter","debounce","switchMap","tap","delay","finalize","takeUntil","map","i0","InjectionToken","Injectable","Optional","Inject","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","NgModule","i2","CommonModule","NgProgressRef","constructor","customConfig","_onDestroyCallback","_started","started","pipe","isStarted","_completed","completed","_trickling","_worker","_state","active","value","_config","state","asObservable","config","start","debounceTime","onTrickling","onComplete","subscribe","snapshot","next","complete","inc","amount","n","trickleFunc","set","setState","clamp","setConfig","Object","assign","destroy","unsubscribe","Math","max","min","trickleSpeed","speed","NG_PROGRESS_CONFIG","defaultConfig","fixed","meteor","thick","spinner","ease","color","direction","spinnerPosition","NgProgress","_instances","Map","ref","id","has","progressRef","get","deleteInstance","destroyAll","forEach","delete","ɵfac","ɵprov","type","args","providedIn","undefined","decorators","NgProgressComponent","_ngProgress","_a","ngOnChanges","ngOnInit","state$","transform","observed","emit","ngOnDestroy","_b","_c","ɵcmp","NgIf","AsyncPipe","selector","host","template","changeDetection","OnPush","styles","NgProgressModule","withConfig","ngModule","providers","provide","useValue","ɵmod","ɵinj","declarations","exports","imports"],"mappings":"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","sourcesContent":["import { Subject, Subscription, BehaviorSubject, combineLatest, timer, EMPTY, of } from 'rxjs';\nimport { filter, debounce, switchMap, tap, delay, finalize, takeUntil, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgProgressRef {\n    constructor(customConfig, _onDestroyCallback) {\n        this._onDestroyCallback = _onDestroyCallback;\n        // Progress start source event (used to cancel finalizing delays)\n        this._started = new Subject();\n        // Progress start event: stream that emits only when it hasn't already started\n        this.started = this._started.pipe(filter(() => !this.isStarted));\n        // Progress ended source event\n        this._completed = new Subject();\n        // Progress start event: stream that emits only when it has already started\n        this.completed = this._completed.pipe(filter(() => this.isStarted));\n        // Stream that increments and updates the progress state\n        this._trickling = new Subject();\n        // Stream that combines \"_trickling\" and \"config\" streams\n        this._worker = Subscription.EMPTY;\n        this._state = new BehaviorSubject({ active: false, value: 0 });\n        this._config = new BehaviorSubject(customConfig);\n        this.state = this._state.asObservable();\n        this.config = this._config.asObservable();\n        this._worker = combineLatest([this._trickling, this._config]).pipe(debounce(([start, config]) => timer(start ? config.debounceTime : 0)), switchMap(([start, config]) => start ? this.onTrickling(config) : this.onComplete(config))).subscribe();\n    }\n    // Get current progress state\n    get snapshot() {\n        return this._state.value;\n    }\n    // Check if progress has started\n    get isStarted() {\n        return this.snapshot.active;\n    }\n    /**\n     * Start the progress\n     */\n    start() {\n        this._started.next();\n        this._trickling.next(true);\n    }\n    /**\n     * Complete the progress\n     */\n    complete() {\n        this._trickling.next(false);\n    }\n    /**\n     * Increment the progress\n     */\n    inc(amount) {\n        const n = this.snapshot.value;\n        if (!this.isStarted) {\n            this.start();\n        }\n        else {\n            if (typeof amount !== 'number') {\n                amount = this._config.value.trickleFunc(n);\n            }\n            this.set(n + amount);\n        }\n    }\n    /**\n     * Set the progress\n     */\n    set(n) {\n        this.setState({ value: this.clamp(n), active: true });\n    }\n    /**\n     * Set config\n     */\n    setConfig(config) {\n        this._config.next(Object.assign(Object.assign({}, this._config.value), config));\n    }\n    /**\n     * Destroy progress reference\n     */\n    destroy() {\n        this._worker.unsubscribe();\n        this._trickling.complete();\n        this._state.complete();\n        this._config.complete();\n        this._started.complete();\n        this._completed.complete();\n        this._onDestroyCallback();\n    }\n    /**\n     * Set progress state\n     */\n    setState(state) {\n        this._state.next(Object.assign(Object.assign({}, this.snapshot), state));\n    }\n    /**\n     * Clamps a value to be between min and max\n     */\n    clamp(n) {\n        return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\n    }\n    /**\n     * Keeps incrementing the progress\n     */\n    onTrickling(config) {\n        if (!this.isStarted) {\n            this.set(this._config.value.min);\n        }\n        return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\n    }\n    /**\n     * Completes then resets the progress\n     */\n    onComplete(config) {\n        this._completed.next();\n        return !this.isStarted ? EMPTY : of({}).pipe(\n        // Complete the progress\n        tap(() => this.setState({ value: 100 })), \n        // Deactivate the progress after a tiny delay\n        delay(config.speed * 1.7), tap(() => this.setState({ active: false })), \n        // Use a tiny delay before resetting\n        delay(config.speed), \n        // Force the progress to reset even it got cancelled\n        finalize(() => this.setState({ value: 0 })), \n        // Cancel any of the finalizing delays if the progress has started again\n        takeUntil(this._started));\n    }\n}\n\nconst NG_PROGRESS_CONFIG = new InjectionToken('ngProgressConfig');\n\nconst defaultConfig = {\n    min: 8,\n    max: 100,\n    speed: 200,\n    debounceTime: 0,\n    trickleSpeed: 300,\n    fixed: true,\n    meteor: true,\n    thick: false,\n    spinner: true,\n    ease: 'linear',\n    color: '#1B95E0',\n    direction: 'ltr+',\n    spinnerPosition: 'right',\n    trickleFunc: (n) => {\n        if (n >= 0 && n < 20)\n            return 10;\n        if (n >= 20 && n < 50)\n            return 4;\n        if (n >= 50 && n < 80)\n            return 2;\n        if (n >= 80 && n < 99)\n            return 0.5;\n        return 0;\n    }\n};\nclass NgProgress {\n    constructor(config) {\n        // Store progress bar instances\n        this._instances = new Map();\n        this.config = config ? Object.assign(Object.assign({}, defaultConfig), config) : defaultConfig;\n    }\n    /**\n     * Get or Create progress bar by ID\n     */\n    ref(id = 'root', config) {\n        if (this._instances.has(id)) {\n            // Get ProgressRef instance\n            const progressRef = this._instances.get(id);\n            if (config) {\n                progressRef.setConfig(Object.assign(Object.assign({}, this.config), config));\n            }\n            return progressRef;\n        }\n        else {\n            // Create new ProgressRef instance\n            const progressRef = new NgProgressRef(Object.assign(Object.assign({}, this.config), config), this.deleteInstance(id));\n            return this._instances.set(id, progressRef).get(id);\n        }\n    }\n    /**\n     * Destroy all progress bar instances\n     */\n    destroyAll() {\n        this._instances.forEach((ref) => ref.destroy());\n    }\n    /**\n     * A destroyer function for each progress bar instance\n     */\n    deleteInstance(id) {\n        return () => {\n            this._instances.delete(id);\n        };\n    }\n}\nNgProgress.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgress, deps: [{ token: NG_PROGRESS_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNgProgress.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgress, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgress, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NG_PROGRESS_CONFIG]\n                    }] }];\n    } });\n\nclass NgProgressComponent {\n    constructor(_ngProgress) {\n        this._ngProgress = _ngProgress;\n        /** Creates a new instance if id is not already exists */\n        this.id = 'root';\n        /** Initializes inputs from the global config */\n        this.min = this._ngProgress.config.min;\n        this.max = this._ngProgress.config.max;\n        this.ease = this._ngProgress.config.ease;\n        this.color = this._ngProgress.config.color;\n        this.speed = this._ngProgress.config.speed;\n        this.thick = this._ngProgress.config.thick;\n        this.fixed = this._ngProgress.config.fixed;\n        this.meteor = this._ngProgress.config.meteor;\n        this.spinner = this._ngProgress.config.spinner;\n        this.trickleSpeed = this._ngProgress.config.trickleSpeed;\n        this.debounceTime = this._ngProgress.config.debounceTime;\n        this.trickleFunc = this._ngProgress.config.trickleFunc;\n        this.spinnerPosition = this._ngProgress.config.spinnerPosition;\n        this.direction = this._ngProgress.config.direction;\n        this.started = new EventEmitter();\n        this.completed = new EventEmitter();\n    }\n    get isStarted() {\n        var _a;\n        return (_a = this.progressRef) === null || _a === void 0 ? void 0 : _a.isStarted;\n    }\n    ngOnChanges() {\n        var _a;\n        // Update progress bar config when inputs change\n        (_a = this.progressRef) === null || _a === void 0 ? void 0 : _a.setConfig({\n            max: (this.max > 0 && this.max <= 100) ? this.max : 100,\n            min: (this.min < 100 && this.min >= 0) ? this.min : 0,\n            speed: this.speed,\n            trickleSpeed: this.trickleSpeed,\n            trickleFunc: this.trickleFunc,\n            debounceTime: this.debounceTime\n        });\n    }\n    ngOnInit() {\n        // Get progress bar service instance\n        this.progressRef = this._ngProgress.ref(this.id, {\n            max: this.max,\n            min: this.min,\n            speed: this.speed,\n            trickleSpeed: this.trickleSpeed,\n            debounceTime: this.debounceTime\n        });\n        // Subscribe to progress state\n        this.state$ = this.progressRef.state.pipe(map((state) => ({\n            active: state.active,\n            transform: `translate3d(${state.value}%,0,0)`\n        })));\n        // Subscribes to started and completed events on demand\n        if (this.started.observed) {\n            this._started = this.progressRef.started.subscribe(() => this.started.emit());\n        }\n        if (this.completed.observed) {\n            this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\n        }\n    }\n    ngOnDestroy() {\n        var _a, _b, _c;\n        (_a = this._started) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        (_b = this._completed) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n        (_c = this.progressRef) === null || _c === void 0 ? void 0 : _c.destroy();\n    }\n    start() {\n        this.progressRef.start();\n    }\n    complete() {\n        this.progressRef.complete();\n    }\n    inc(n) {\n        this.progressRef.inc(n);\n    }\n    set(n) {\n        this.progressRef.set(n);\n    }\n}\nNgProgressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressComponent, deps: [{ token: NgProgress }], target: i0.ɵɵFactoryTarget.Component });\nNgProgressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.2\", type: NgProgressComponent, selector: \"ng-progress\", inputs: { id: \"id\", min: \"min\", max: \"max\", ease: \"ease\", color: \"color\", speed: \"speed\", thick: \"thick\", fixed: \"fixed\", meteor: \"meteor\", spinner: \"spinner\", trickleSpeed: \"trickleSpeed\", debounceTime: \"debounceTime\", trickleFunc: \"trickleFunc\", spinnerPosition: \"spinnerPosition\", direction: \"direction\" }, outputs: { started: \"started\", completed: \"completed\" }, host: { attributes: { \"role\": \"progressbar\" }, properties: { \"attr.spinnerPosition\": \"spinnerPosition\", \"attr.direction\": \"direction\", \"attr.thick\": \"thick\", \"attr.fixed\": \"fixed\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n           [attr.active]=\"state.active\"\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n               [style.transform]=\"state.transform\"\n               [style.backgroundColor]=\"color\"\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n               [style.borderTopColor]=\"color\"\n               [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `, isInline: true, styles: [\":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\\\"ltr+\\\"] .ng-bar,:host[direction=\\\"rtl+\\\"] .ng-bar{margin-left:-100%}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{right:0}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\\\"rtl+\\\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\\\"rtl+\\\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\\\"rtl+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], pipes: { \"async\": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng-progress', host: {\n                        'role': 'progressbar',\n                        '[attr.spinnerPosition]': 'spinnerPosition',\n                        '[attr.direction]': 'direction',\n                        '[attr.thick]': 'thick',\n                        '[attr.fixed]': 'fixed'\n                    }, template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n           [attr.active]=\"state.active\"\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n               [style.transform]=\"state.transform\"\n               [style.backgroundColor]=\"color\"\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n               [style.borderTopColor]=\"color\"\n               [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\":host{z-index:999999;pointer-events:none}:host[fixed=true] .ng-progress-bar,:host[fixed=true] .ng-spinner{position:fixed}:host[fixed=true] .ng-spinner{top:15px}:host[fixed=true][spinnerPosition=left] .ng-spinner{left:15px}:host[fixed=true][spinnerPosition=right] .ng-spinner{right:15px}:host[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}:host[thick=true] .ng-bar-placeholder{height:3px!important}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=ltr-] .ng-meteor{transform:rotate(3deg)}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=ltr-][thick=true] .ng-meteor{transform:rotate(4deg)}:host[direction=\\\"ltr+\\\"] .ng-bar,:host[direction=\\\"rtl+\\\"] .ng-bar{margin-left:-100%}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{right:0}:host[direction=\\\"ltr+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{top:-3px}:host[direction=\\\"ltr+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{top:-4px}:host[direction=ltr-] .ng-meteor,:host[direction=\\\"rtl+\\\"] .ng-meteor{bottom:-3px}:host[direction=ltr-][thick=true] .ng-meteor,:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor{bottom:-4px}:host[direction=ltr-] .ng-bar-placeholder,:host[direction=\\\"rtl+\\\"] .ng-bar-placeholder{transform:rotate(180deg)}:host[direction=ltr-] .ng-spinner-icon,:host[direction=\\\"rtl+\\\"] .ng-spinner-icon{animation-directionection:reverse}:host[direction=\\\"rtl+\\\"] .ng-meteor,:host[direction=rtl-] .ng-meteor{transform:rotate(-3deg)}:host[direction=\\\"rtl+\\\"][thick=true] .ng-meteor,:host[direction=rtl-][thick=true] .ng-meteor{transform:rotate(-4deg)}:host[spinnerPosition=left] .ng-spinner{left:10px}:host[spinnerPosition=right] .ng-spinner{right:10px}.ng-progress-bar{position:relative;z-index:999999;top:0;left:0;width:100%;transform:scale(1);filter:alpha(opacity=0);opacity:0}.ng-progress-bar[active=true]{filter:alpha(opacity=100);opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{position:absolute;display:block;z-index:1031;top:10px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:spinner-animation .25s linear infinite;animation:spinner-animation .25s linear infinite;border:2px solid transparent;border-radius:50%}@-webkit-keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NgProgress }]; }, propDecorators: { id: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], ease: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], speed: [{\n                type: Input\n            }], thick: [{\n                type: Input\n            }], fixed: [{\n                type: Input\n            }], meteor: [{\n                type: Input\n            }], spinner: [{\n                type: Input\n            }], trickleSpeed: [{\n                type: Input\n            }], debounceTime: [{\n                type: Input\n            }], trickleFunc: [{\n                type: Input\n            }], spinnerPosition: [{\n                type: Input\n            }], direction: [{\n                type: Input\n            }], started: [{\n                type: Output\n            }], completed: [{\n                type: Output\n            }] } });\n\nclass NgProgressModule {\n    static withConfig(config) {\n        return {\n            ngModule: NgProgressModule,\n            providers: [\n                { provide: NG_PROGRESS_CONFIG, useValue: config }\n            ]\n        };\n    }\n}\nNgProgressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgProgressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressModule, declarations: [NgProgressComponent], imports: [CommonModule], exports: [NgProgressComponent] });\nNgProgressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgProgressComponent],\n                    exports: [NgProgressComponent],\n                    imports: [CommonModule]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-progressbar\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NG_PROGRESS_CONFIG, NgProgress, NgProgressComponent, NgProgressModule, NgProgressRef };\n"]},"metadata":{},"sourceType":"module"}