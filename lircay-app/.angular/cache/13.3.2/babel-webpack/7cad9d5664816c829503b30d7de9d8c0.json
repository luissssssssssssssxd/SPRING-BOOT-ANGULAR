{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\nimport * as i1 from 'ngx-progressbar';\nconst NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');\n\nclass NgProgressInterceptor {\n  constructor(ngProgress, config) {\n    this.ngProgress = ngProgress;\n    this._inProgressCount = 0;\n    this._config = {\n      id: 'root',\n      silentApis: [],\n      matcher: undefined\n    };\n    this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;\n  }\n\n  intercept(req, next) {\n    // Ignore by request headers\n    if (req.headers.has('ignoreProgressBar')) {\n      return next.handle(req.clone({\n        headers: req.headers.delete('ignoreProgressBar')\n      }));\n    } // Ignore silent api requests\n\n\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n\n    this._inProgressCount++;\n    this._progressRef = this.ngProgress.ref(this._config.id);\n\n    if (!this._progressRef.isStarted) {\n      this._progressRef.start();\n    }\n\n    return next.handle(req).pipe(finalize(() => {\n      this._inProgressCount--;\n\n      if (this._inProgressCount === 0) {\n        this._progressRef.complete();\n      }\n    }));\n  }\n  /**\n   * Check if request is silent.\n   * @param req request\n   */\n\n\n  checkUrl(req) {\n    var _a, _b;\n\n    const url = req.url.toLowerCase();\n\n    if (this._config.matcher && ((_a = this._config.silentApis) === null || _a === void 0 ? void 0 : _a.length)) {\n      return checkForMatcher(url, this._config.matcher) && checkForSilentApis(url, this._config.silentApis);\n    }\n\n    if ((_b = this._config.silentApis) === null || _b === void 0 ? void 0 : _b.length) {\n      return checkForSilentApis(url, this._config.silentApis);\n    }\n\n    if (this._config.matcher) {\n      return checkForMatcher(url, this._config.matcher);\n    }\n\n    return false;\n  }\n\n}\n\nNgProgressInterceptor.ɵfac = function NgProgressInterceptor_Factory(t) {\n  return new (t || NgProgressInterceptor)(i0.ɵɵinject(i1.NgProgress), i0.ɵɵinject(NG_PROGRESS_HTTP_CONFIG, 8));\n};\n\nNgProgressInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgProgressInterceptor,\n  factory: NgProgressInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.NgProgress\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_PROGRESS_HTTP_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\nfunction checkForSilentApis(url, silentApis) {\n  return !!silentApis.find(u => url.includes(u.toLowerCase()));\n}\n\nfunction checkForMatcher(url, matcher) {\n  return !!url.match(matcher);\n}\n\nclass NgProgressHttpModule {\n  static withConfig(config) {\n    return {\n      ngModule: NgProgressHttpModule,\n      providers: [{\n        provide: NG_PROGRESS_HTTP_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgProgressHttpModule.ɵfac = function NgProgressHttpModule_Factory(t) {\n  return new (t || NgProgressHttpModule)();\n};\n\nNgProgressHttpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgProgressHttpModule\n});\nNgProgressHttpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: NgProgressInterceptor,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgProgressHttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: HTTP_INTERCEPTORS,\n        useClass: NgProgressInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NG_PROGRESS_HTTP_CONFIG, NgProgressHttpModule, NgProgressInterceptor };","map":{"version":3,"sources":["C:/Users/Luis Yañez/Desktop/sistema2/SPRING-BOOT-ANGULAR/lircay-app/node_modules/ngx-progressbar/fesm2015/ngx-progressbar-http.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","NgModule","HTTP_INTERCEPTORS","finalize","i1","NG_PROGRESS_HTTP_CONFIG","NgProgressInterceptor","constructor","ngProgress","config","_inProgressCount","_config","id","silentApis","matcher","undefined","Object","assign","intercept","req","next","headers","has","handle","clone","delete","checkUrl","_progressRef","ref","isStarted","start","pipe","complete","_a","_b","url","toLowerCase","length","checkForMatcher","checkForSilentApis","ɵfac","NgProgress","ɵprov","type","decorators","args","find","u","includes","match","NgProgressHttpModule","withConfig","ngModule","providers","provide","useValue","ɵmod","ɵinj","useClass","multi"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\nimport * as i1 from 'ngx-progressbar';\n\nconst NG_PROGRESS_HTTP_CONFIG = new InjectionToken('ngProgressHttpConfig');\n\nclass NgProgressInterceptor {\n    constructor(ngProgress, config) {\n        this.ngProgress = ngProgress;\n        this._inProgressCount = 0;\n        this._config = {\n            id: 'root',\n            silentApis: [],\n            matcher: undefined\n        };\n        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;\n    }\n    intercept(req, next) {\n        // Ignore by request headers\n        if (req.headers.has('ignoreProgressBar')) {\n            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));\n        }\n        // Ignore silent api requests\n        if (this.checkUrl(req)) {\n            return next.handle(req);\n        }\n        this._inProgressCount++;\n        this._progressRef = this.ngProgress.ref(this._config.id);\n        if (!this._progressRef.isStarted) {\n            this._progressRef.start();\n        }\n        return next.handle(req).pipe(finalize(() => {\n            this._inProgressCount--;\n            if (this._inProgressCount === 0) {\n                this._progressRef.complete();\n            }\n        }));\n    }\n    /**\n     * Check if request is silent.\n     * @param req request\n     */\n    checkUrl(req) {\n        var _a, _b;\n        const url = req.url.toLowerCase();\n        if (this._config.matcher && ((_a = this._config.silentApis) === null || _a === void 0 ? void 0 : _a.length)) {\n            return checkForMatcher(url, this._config.matcher) && checkForSilentApis(url, this._config.silentApis);\n        }\n        if ((_b = this._config.silentApis) === null || _b === void 0 ? void 0 : _b.length) {\n            return checkForSilentApis(url, this._config.silentApis);\n        }\n        if (this._config.matcher) {\n            return checkForMatcher(url, this._config.matcher);\n        }\n        return false;\n    }\n}\nNgProgressInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressInterceptor, deps: [{ token: i1.NgProgress }, { token: NG_PROGRESS_HTTP_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNgProgressInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1.NgProgress }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NG_PROGRESS_HTTP_CONFIG]\n                    }] }];\n    } });\nfunction checkForSilentApis(url, silentApis) {\n    return !!silentApis.find((u) => url.includes(u.toLowerCase()));\n}\nfunction checkForMatcher(url, matcher) {\n    return !!url.match(matcher);\n}\n\nclass NgProgressHttpModule {\n    static withConfig(config) {\n        return {\n            ngModule: NgProgressHttpModule,\n            providers: [\n                { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }\n            ]\n        };\n    }\n}\nNgProgressHttpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgProgressHttpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule });\nNgProgressHttpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule, providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgProgressHttpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NG_PROGRESS_HTTP_CONFIG, NgProgressHttpModule, NgProgressInterceptor };\n"]},"metadata":{},"sourceType":"module"}